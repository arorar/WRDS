library(proto)
library(gsubfn)
library(chron)
library(RSQLite)
library(RSQLite.extfuns)
library(sqldf)
library(proto)
library(gsubfn)
library(chron)
library(RSQLite)
library(RSQLite.extfuns)
library(sqldf)
library(reshape)
library(testthat)
?test_tha
?test_that
})
LIBRARY(gsubfun)
library(gsubfun)
install.packages("gsubfun")
install.packages("gsubfun",lib="C:\\Users\\RohitAndSonali\\Documents\\R\\win-library\\3.0")
install.packages("Rtools")
install.packages("Rtools",lib="C:\\Users\\RohitAndSonali\\Documents\\R\\win-library\\3.0")
install.packages("Rtools")
\subsection{supportedOrganisms}
help(startup)
help(Startup)
test_file()
library(testthat)
x<--10:10
dnorm(x)
2*dnorm(x)*pnorm(-4*x)
lines(2*dnorm(x)*pnorm(-4*x))
lines(x,2*dnorm(x)*pnorm(-4*x))
plot(x,2*dnorm(x)*pnorm(-4*x))
plot(x,2*dnorm(x)*pnorm(-4*x),type="l")
x<--10:10:0.01
x<-seq(-10,10:0.01)
x<-seq(-10,10,0.01)
plot(x,2*dnorm(x)*pnorm(-4*x),type="l")
plot(x,2*dnorm(x)*pnorm(-10*x),type="l")
lines(x,dnorm(x))
lines(x,cumsum(dnorm(x))
)
plot(x,cumsum(2*dnorm(x)*pnorm(-10*x)),type="l",col="red")
lines(x,cumsum(dnorm(x)))
cumsum(dnorm(x))
len(x)
length(x)
par(mfrow=c(2,1))
plot(x,cumsum(2*dnorm(x)*pnorm(-10*x)),type="l",col="red")
lines(x,cumsum(dnorm(x)))
plot(x,2*dnorm(x)*pnorm(-10*x),type="l",col="red")
lines(x,dnorm(x))
test_file
library(testthat)
library(WRDS)
test_package("WRDS")
source('C:/Users/RohitAndSonali/Desktop/Packages/WRDS/R/WrdsFunda.R')
.dbFileName="Cqa.sqlite"
#Global variables
.dbFileName="Cqa.sqlite"
.tblCrsp ="dow30CRSP"
.tblCompu="dow30Compustatlink"
.tblSector="sector"
# ################################################################################
# #Fires the given query against database and returns all rows.
# ################################################################################
selectDb <- function(query)
{
#Connect to database, this looks for a file in your working directory (getwd())
db.Connection <- dbConnect(SQLite(), dbname=.dbFileName)
#Get records from database
result.sql <- dbSendQuery(conn = db.Connection,query)
result.rows <- fetch(result.sql,n=-1)
#Cleanup
dbClearResult(result.sql)
#Close out any open connection
dbDisconnect(db.Connection)
#return records to the caller
result.rows
}
getReturnTimeSeriesQuery <- function()
{
return.query <- paste("select distinct c.[date],c.[TICKER],c.[RET]
from",.tblCrsp,
"as c where c.[RET] !=0 order by c.[date]")
return.query<-strwrap(return.query, width=10000, simplify=TRUE)
return.query
}
getReturnTimeSeries <- function()
{
return.query <- getReturnTimeSeriesQuery()
return.rows <- selectDb(return.query)
return.rows
}
getReturnPivot <- function()
{
return.rows <- getReturnTimeSeries()
pivot.return <- cast(return.rows, date ~ TICKER,value='RET')
pivot.return
}
getFundamentalReturnQuery <- function()
{
funda.query <- paste("select s.gvkey,s.permno as PERMNO,s.[PERMCO],c.[CUSIP],
s.[tic] as TICKER,s.NAME,c.[RET] as [RETURN],s.[GSECTOR],
sec.[Sector] ,s.[MarketCap],s.[EntValue],s.[P2B],
s.[EV2S],s.[EV2OIBDA],s.datadate as CompuDate,c.[date]
as CrspDate
from  ",.tblCrsp,"c inner join ",.tblCompu,
"s on c.[permno]=s.[permno] and c.[permco]=s.[permco]
inner join ",.tblSector,
"sec on sec.[GSECTOR] = s.[GSECTOR]
where  c.[date] <= s.[datadate]
and substr(c.[date],1,4)=substr(s.[datadate],1,4)
and cast(substr(s.[datadate],6,2) as INT)-
cast(substr(c.[date],6,2) as INT) <=2 ")
strwrap(funda.query, width=10000, simplify=TRUE)
}
getFundamentalReturn <- function()
{
funda.query <- getFundamentalReturnQuery()
funda.rows <- selectDb(funda.query)
funda.rows
}
getFundamentalReturn()
?dbConnect
library(gsubfun)
install.packages("gsubfun")
library(WRDS)
library(WRDS)
library(WRDS)
library(WRDS)
library(WRDS)
getwd()
system.file("extdata", "Cqa.sqlite", package="WRDS")
library(WRDS)
library(WRDS)
?mean
example(mean)
library(WRDS)
library(WRDS)
initexmf --update-fndb
R.home("bin")
?cast
getStockMidCap(2)
getStockMidCap(10)
getStockXCap()
library(WRDS)
getStockXCap()
df <- getStockXCap()
class(df)
getProminentStocks(1)
library(WRDS)
getProminentStocks(1)
library(WRDS)
getProminentStocks(1)
getProminentStocks(2)
library(WRDS)
getProminentStocks(2)
getProminentStocks(2)
lg
rownames(ls)
library(WRDS)
getProminentStocks(2)
library(WRDS)
getProminentStocks(2)
a <- getProminentStocks(2)
nrow(a)
ncol(a)
getFundamentalReturn()
getReturnPivot()
a<-getReturnPivot()
str(a)
apply(a,MARGIN=1,  # empty data.frame
FUN=function(row) {
if(length(row)==0 || !row) {return()}
!any(vec[ row[["start"]]:row[["end"]] ])
})
getFundamentalReturn()
str(a)
ncol(a)
nrow(a)
as.logical
library(WRDS)
test_dir("inst/tests/")
library(WRDS)
test_dir("inst/tests/")
test_dir("inst/tests/")
library(WRDS)
install.packages
?install.packages
library(WRDS)
devtools::build_github_devtools()
#### Restart R before continuing ####
install.packages("devtools.zip", repos = NULL)
# Remove the package after installation
unlink("devtools.zip")
devtools::build_github_devtools()
#### Restart R before continuing ####
install.packages("devtools.zip", repos = NULL)
# Remove the package after installation
unlink("devtools.zip")
library(WRDS)
R.home("bin")
